/**
 * Flasger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioAttachment from './AudioAttachment';

/**
 * The RecordingEntry model module.
 * @module model/RecordingEntry
 * @version 1.0.10
 */
class RecordingEntry {
    /**
     * Constructs a new <code>RecordingEntry</code>.
     * @alias module:model/RecordingEntry
     * @param name {String} 
     * @param sourceChannelMode {module:model/RecordingEntry.SourceChannelModeEnum} 
     */
    constructor(name, sourceChannelMode) { 
        
        RecordingEntry.initialize(this, name, sourceChannelMode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, sourceChannelMode) { 
        obj['name'] = name;
        obj['source_channel_mode'] = sourceChannelMode;
    }

    /**
     * Constructs a <code>RecordingEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecordingEntry} obj Optional instance to populate.
     * @return {module:model/RecordingEntry} The populated <code>RecordingEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecordingEntry();

            if (data.hasOwnProperty('audio_files')) {
                obj['audio_files'] = ApiClient.convertToType(data['audio_files'], [AudioAttachment]);
            }
            if (data.hasOwnProperty('audio_sources')) {
                obj['audio_sources'] = ApiClient.convertToType(data['audio_sources'], [AudioAttachment]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ApiClient.convertToType(data['meta'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('source_channel_mode')) {
                obj['source_channel_mode'] = ApiClient.convertToType(data['source_channel_mode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecordingEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecordingEntry</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RecordingEntry.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['audio_files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['audio_files'])) {
                throw new Error("Expected the field `audio_files` to be an array in the JSON data but got " + data['audio_files']);
            }
            // validate the optional field `audio_files` (array)
            for (const item of data['audio_files']) {
                AudioAttachment.validateJSON(item);
            };
        }
        if (data['audio_sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['audio_sources'])) {
                throw new Error("Expected the field `audio_sources` to be an array in the JSON data but got " + data['audio_sources']);
            }
            // validate the optional field `audio_sources` (array)
            for (const item of data['audio_sources']) {
                AudioAttachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['source_channel_mode'] && !(typeof data['source_channel_mode'] === 'string' || data['source_channel_mode'] instanceof String)) {
            throw new Error("Expected the field `source_channel_mode` to be a primitive type in the JSON string but got " + data['source_channel_mode']);
        }

        return true;
    }


}

RecordingEntry.RequiredProperties = ["name", "source_channel_mode"];

/**
 * @member {Array.<module:model/AudioAttachment>} audio_files
 */
RecordingEntry.prototype['audio_files'] = undefined;

/**
 * @member {Array.<module:model/AudioAttachment>} audio_sources
 */
RecordingEntry.prototype['audio_sources'] = undefined;

/**
 * @member {String} description
 * @default 'null'
 */
RecordingEntry.prototype['description'] = 'null';

/**
 * @member {String} id
 */
RecordingEntry.prototype['id'] = undefined;

/**
 * @member {Object.<String, String>} meta
 */
RecordingEntry.prototype['meta'] = undefined;

/**
 * @member {String} name
 */
RecordingEntry.prototype['name'] = undefined;

/**
 * @member {module:model/RecordingEntry.SourceChannelModeEnum} source_channel_mode
 */
RecordingEntry.prototype['source_channel_mode'] = undefined;





/**
 * Allowed values for the <code>source_channel_mode</code> property.
 * @enum {String}
 * @readonly
 */
RecordingEntry['SourceChannelModeEnum'] = {

    /**
     * value: "LEFT"
     * @const
     */
    "LEFT": "LEFT",

    /**
     * value: "RIGHT"
     * @const
     */
    "RIGHT": "RIGHT",

    /**
     * value: "STEREO"
     * @const
     */
    "STEREO": "STEREO"
};



export default RecordingEntry;

