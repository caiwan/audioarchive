/**
 * Flasger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import Group from './Group';
import RecordingEntry from './RecordingEntry';

/**
 * The CatalogEntrySchema model module.
 * @module model/CatalogEntrySchema
 * @version 1.0.10
 */
class CatalogEntrySchema {
    /**
     * Constructs a new <code>CatalogEntrySchema</code>.
     * @alias module:model/CatalogEntrySchema
     * @param name {String} 
     * @param recordings {Array.<module:model/RecordingEntry>} 
     */
    constructor(name, recordings) { 
        
        CatalogEntrySchema.initialize(this, name, recordings);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, recordings) { 
        obj['name'] = name;
        obj['recordings'] = recordings;
    }

    /**
     * Constructs a <code>CatalogEntrySchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogEntrySchema} obj Optional instance to populate.
     * @return {module:model/CatalogEntrySchema} The populated <code>CatalogEntrySchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogEntrySchema();

            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [Group]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ApiClient.convertToType(data['meta'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('recordings')) {
                obj['recordings'] = ApiClient.convertToType(data['recordings'], [RecordingEntry]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogEntrySchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogEntrySchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogEntrySchema.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachments'])) {
                throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
            }
            // validate the optional field `attachments` (array)
            for (const item of data['attachments']) {
                Attachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groups'])) {
                throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
            }
            // validate the optional field `groups` (array)
            for (const item of data['groups']) {
                Group.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['recordings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recordings'])) {
                throw new Error("Expected the field `recordings` to be an array in the JSON data but got " + data['recordings']);
            }
            // validate the optional field `recordings` (array)
            for (const item of data['recordings']) {
                RecordingEntry.validateJSON(item);
            };
        }

        return true;
    }


}

CatalogEntrySchema.RequiredProperties = ["name", "recordings"];

/**
 * @member {Array.<module:model/Attachment>} attachments
 */
CatalogEntrySchema.prototype['attachments'] = undefined;

/**
 * @member {String} description
 * @default 'null'
 */
CatalogEntrySchema.prototype['description'] = 'null';

/**
 * @member {Array.<module:model/Group>} groups
 */
CatalogEntrySchema.prototype['groups'] = undefined;

/**
 * @member {String} id
 */
CatalogEntrySchema.prototype['id'] = undefined;

/**
 * @member {Object.<String, String>} meta
 */
CatalogEntrySchema.prototype['meta'] = undefined;

/**
 * @member {String} name
 */
CatalogEntrySchema.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/RecordingEntry>} recordings
 */
CatalogEntrySchema.prototype['recordings'] = undefined;






export default CatalogEntrySchema;

